package main

import (
	"strings"
	"testing"
)

func TestPrintImage(t *testing.T) {
	cases := []struct {
		desc string
		input string
		wants []string
	}{
		{ "butterfly", "1\n", []string {
				"  .==-.                   .-==.     ",
				"   \\()8`-._  `.   .'  _.-'8()/     ",
				"   (88\"   ::.  \\./  .::   \"88)   ",
				"    \\_.'`-::::.(#).::::-'`._/      ",
				"      `._... .q(_)p. ..._.'         ",
				"        \"\"-..-'|=|`-..-\"\"       ",
				"        .\"\"' .'|=|`. `\"\".       ",
				"      ,':8(o)./|=|\\.(o)8:`.        ",
				"     (O :8 ::/ \\_/ \\:: 8: O)      ",
				"      \\O `::/       \\::' O/       ",
				"       \"\"--'         `--\"\"   hjw",
			},
		},
		{ "elephant", "2\n", []string {
				"       _..--\"\"-.                  .-\"\"--.._ ",
				"   _.-'         \\ __...----...__ /         '-._",
				" .'      .:::...,'              ',...:::.      '.",
				"(     .'``'''::;                  ;::'''``'.     )",
				" \\             '-)              (-'             /",
				"  \\             /                \\             /",
				"   \\          .'.-.            .-.'.          /",
				"    \\         | \\0|            |0/ |         /",
				"    |          \\  |   .-==-.   |  /          |",
				"     \\          `/`;          ;`\\`          /",
				"      '.._      (_ |  .-==-.  | _)      _..'",
				"          `\"`\"-`/ `/'        '\\` \\`-\"`\"`",
				"               / /`;   .==.   ;`\\ \\",
				"         .---./_/   \\  .==.  /   \\ \\",
				"        / '.    `-.__)       |    `\"",
				"       | =(`-.        '==.   ;",
				" jgs    \\  '. `-.           /",
				"         \\_:_)   `\"--.....-'",
			},
		},
		{ "teddy bear", "3\n", []string {
				"            ___   .--. ",
				"      .--.-\"   \"-' .- |",
				"     / .-,`          .'",
				"     \\   `           \\",
				"      '.            ! \\",
				"        |     !  .--.  |",
				"        \\        '--'  /.____",
				"       /`-.     \\__,'.'      `\\",
				"    __/   \\`-.____.-' `\\      /",
				"    | `---`'-'._/-`     \\----'    _",
				"    |,-'`  /             |    _.-' `\\",
				"   .'     /              |--'`     / |",
				"  /      /\\              `         | |",
				"  |   .\\/  \\      .--. __          \\ |",
				"   '-'      '._       /  `\\         /",
				"      jgs      `\\    '     |------'`",
				"                 \\  |      |",
				"                  \\        /",
				"                   '._  _.'",
				"                      ``",
			},
		},
		{ "snake", "4\n", []string {
				"         ,,'6''-,.",
				"        <====,.;;--.",
				"        _`---===. \"\"\"==__",
				"      //\"\"@@-\\===\\@@@@ \"\"\\\\",
				"     |( @@@  |===|  @@@  ||",
				"      \\\\ @@   |===|  @@  //",
				"        \\\\ @@ |===|@@@ //",
				"         \\\\  |===|  //",
				"___________\\\\|===| //_____,----\"\"\"\"\"\"\"\"\"\"-----,_",
				"  \"\"\"\"---,__`\\===`/ _________,---------,____    `,",
				"             |==||                           `\\   \\",
				"            |==| |          pb                 )   |",
				"           |==| |       _____         ______,--'   '",
				"           |=|  `----\"\"\"     `\"\"\"\"\"\"\"\"         _,-'",
				"            `=\\     __,---\"\"\"-------------\"\"\"''",
				"                \"\"\"\"		",
			},
		},
	}
	for _, tc := range cases {
		t.Run(tc.desc, func(t *testing.T) {
			reader := strings.NewReader(tc.input)
			writer := &strings.Builder{}
			PrintImage(reader, writer)
			got := writer.String()
			for _, want := range tc.wants {
				if !strings.Contains(got, want) {
					t.Errorf("\ngot  %q\nwant %q", got, want)
				}
			}
		})
	}
}
